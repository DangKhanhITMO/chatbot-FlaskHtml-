from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from openai import OpenAI
import os
from dotenv import load_dotenv
import traceback

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env khi ch·∫°y local
load_dotenv()

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__, template_folder="templates")
CORS(app)

# ƒê·ªçc API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not OPENAI_API_KEY:
    raise ValueError("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng OPENAI_API_KEY. H√£y khai b√°o trong .env ho·∫∑c Render Environment.")

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# Trang ch√≠nh giao di·ªán chatbot
@app.route('/')
def home():
    return render_template("index.html")

# API chat ch√≠nh
@app.route('/chat', methods=['POST'])
def chat():
    data = request.get_json()
    user_message = data.get("message", "").strip()

    # L·ªùi ch√†o ban ƒë·∫ßu
    if user_message.lower() in ["", "start", "begin"]:
        welcome_message = (
            "Xin ch√†o qu√Ω kh√°ch!\nT√¥i l√† nh√¢n vi√™n t∆∞ v·∫•n tr·∫£ l·ªùi t·ª± ƒë·ªông c·ªßa h·ªá th·ªëng "
            "ph√≤ng kh√°m v√† chƒÉm s√≥c th√∫ y GPET!\nT√¥i c√≥ th·ªÉ h·ªó tr·ª£ v√† gi√∫p g√¨ cho qu√Ω kh√°ch?"
        )
        return jsonify({"reply": welcome_message})

    try:
        print("üì® G·ª≠i y√™u c·∫ßu ƒë·∫øn OpenAI v·ªõi n·ªôi dung:", user_message)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán."},
                {"role": "user", "content": user_message}
            ]
        )
        reply = response.choices[0].message.content.strip()
        print("‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ OpenAI:", reply)
        return jsonify({"reply": reply})

    except Exception as e:
        print("‚ùå L·ªói khi g·ªçi OpenAI:", e)
        traceback.print_exc()
        return jsonify({"reply": "‚ùå L·ªói server khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau!"}), 500

# Route ki·ªÉm tra ho·∫°t ƒë·ªông c·ªßa server
@app.route('/health')
def health_check():
    return "‚úÖ Server ƒëang ho·∫°t ƒë·ªông", 200

# Route test OpenAI k·∫øt n·ªëi
@app.route('/test-openai')
def test_openai():
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": "Xin ch√†o"}]
        )
        return jsonify({"reply": response.choices[0].message.content})
    except Exception as e:
        print("‚ùå L·ªói khi test OpenAI:", e)
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

# Ch·∫°y server local (Render s·∫Ω d√πng start command ri√™ng)
if __name__ == '__main__':
    app.run(debug=True, port=5000, host='0.0.0.0')